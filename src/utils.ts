/// Remember to sort first.
export function binarySearch(array: ArrayLike<number>, value: number): number | null {
    let mid, lo = 0, hi = array.length - 1;

    while (lo <= hi) {
        mid = Math.floor((lo + hi) / 2);

        if (array[mid] > value) {
            hi = mid - 1;
        } else if (array[mid] < value) {
            lo = mid + 1;
        } else {
            return mid;
        }
    }
    return null;
}

export function toHex(i: number): string {
    let s = i.toString(16);
    while (s.length < 2) {
        s = "0" + s;
    }
    return s;
}

/// Remember to sort first.
export function uniq(array: number[]): void {
    array.filter((item, pos, array) => !pos || item != array[pos - 1]);
}

/// LZW Compression/Decompression for Strings
/// https://rosettacode.org/wiki/LZW_compression#ES6_Version
export class LZW {
    /// Perform the LZW compression
    /// uncompressed - String. The string on which to perform the compression.
    static compress(uncompressed: string): number[] {
        // Initialize dictionary
        const dictionary: { [id: string]: number } = {};
        for (let i = 0; i < 256; i++) {
            dictionary[String.fromCharCode(i)] = i;
        }

        const result = [];
        let word = '';
        let dictSize = 256;

        for (let i = 0, len = uncompressed.length; i < len; i++) {
            const curChar = uncompressed[i];
            const joinedWord = word + curChar;

            // Do not use dictionary[joinedWord] because javascript objects 
            // will return values for myObject['toString']
            if (Object.prototype.hasOwnProperty.call(dictionary, joinedWord)) {
                word = joinedWord;
            } else {
                result.push(dictionary[word]);
                // Add wc to the dictionary.
                dictionary[joinedWord] = dictSize++;
                word = curChar;
            }
        }

        if (word !== '') {
            result.push(dictionary[word]);
        }

        return result;
    }

    /**
        Decompress LZW array generated by LZW.compress()
        compressed - Array. The array that holds LZW compressed data.
    */
    static decompress(compressed: number[]): string {
        // Initialize Dictionary (inverse of compress)
        const dictionary: { [id: number]: string } = {};
        for (let i = 0; i < 256; i++) {
            dictionary[i] = String.fromCharCode(i);
        }

        let word = String.fromCharCode(compressed[0]);
        let result = word;
        let entry = '';
        let dictSize = 256;

        for (let i = 1, len = compressed.length; i < len; i++) {
            const curNumber = compressed[i];

            if (dictionary[curNumber] !== undefined) {
                entry = dictionary[curNumber];
            } else {
                if (curNumber === dictSize) {
                    entry = word + word[0];
                } else {
                    throw "Decompression error!";
                }
            }

            result += entry;

            // Add word + entry[0] to dictionary
            dictionary[dictSize++] = word + entry[0];

            word = entry;
        }

        return result;
    }
}
